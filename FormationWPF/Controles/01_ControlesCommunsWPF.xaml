<Window x:Class="FormationWPF.Controles._01_ControlesCommunsWPF"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FormationWPF.Controles"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="_01_ControlesCommunsWPF" Height="800" Width="850" ResizeMode="NoResize">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>

        <!--Le contrôle TextBlock est le contrôle le plus adapté pour l’affichage de texte. -->
        <TextBlock x:Name="textBlock1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="34,22,0,0">
            <Bold>WPF</Bold> c'est facile
            <Italic>
                Pour le 
            </Italic>
            <LineBreak />
            moment
        </TextBlock>

        <!--Le contrôle TextBox est le contrôle le plus simple et le plus utilisé pour l’édition de texte-->
        <Label Grid.Column="1" x:Name="label1" Content="TextBox + ContextMenu" VerticalAlignment="center" HorizontalAlignment="Center" FontSize="14"/>
        <TextBox x:Name="textBox1" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center" Height="40" Width="200">
            <!--
                Creation d'un Menu
                Avec un sous Menu Effacer 
                permettant de supprimer les données du champs de saisies
            -->
            <TextBox.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Effacer" x:Name="cmEffacer" Click="cmEffacer_Click" />
                </ContextMenu>
            </TextBox.ContextMenu>
        </TextBox>

        <!--
            Le contrôle RichTextBox permet d’afficher du texte au format RTF (Fichier de traitement de texte au format standard Rich Text Format ;
            ex : comme l’application WordPad de windows). 
            Par exemple avec ce contrôle on peut mettre en place , Activer la vérification orthographique selon le pays
        -->
        <Label Grid.Row="1" x:Name="label2" Content="RichTextBox avec correction" VerticalAlignment="center" HorizontalAlignment="Center" FontSize="14"/>
        <RichTextBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center"  Height="50" Width="220" SpellCheck.IsEnabled="True"
                     Language="fr-FR"/>

        <!--CheckBox : Case à cocher -->
        <!--Quand on clique sur la case à coher   ==> remplacer le Content du checkBox par "You agree !-->
        <CheckBox Grid.Column="2" Grid.Row="1" Content="CheckBox" x:Name="checkBox1" VerticalAlignment="Center" HorizontalAlignment="Center" Checked="checkBox1_Checked"/>

        <StackPanel Grid.Row="2" x:Name="stackPanel1">
            <RadioButton x:Name="radionButton1" Content="RadioButton1" Height="16" Margin="26,5" GroupName="groupe1"/>
            <RadioButton x:Name="radionButton2" Content="RadioButton2" Height="16" Margin="26,5" GroupName="groupe1"/>
            <RadioButton x:Name="radionButton3" Content="RadioButton3" Height="16" Margin="26,5" GroupName="groupe1"/>
        </StackPanel>

        <!--
            SelectionChanged se produit lorsqu'on selectionne un des éléments du ComboBox
            comboBox1_SelectionChanged : La methode qui va traiter cet événement va afficher un
            MessageBox avec l'élément selectionné
        -->
        <ComboBox Grid.Column="1" Grid.Row="2" x:Name="combo1" Height="40" Width="200" VerticalAlignment="Center" HorizontalAlignment="Center" SelectionChanged="combo1_SelectionChanged">
            <ComboBoxItem Content="Litterature" />
            <ComboBoxItem Content="Film" />
            <ComboBoxItem Content="Histoire-Géographie" />
            <ComboBoxItem Content="Philosophie" />
        </ComboBox>

        <!--ListBox -->
        <!--
            Le contrôle ListBox affiche une liste d’élément dont un ou plusieurs sont sélectionnable. 
            Le mode de sélection est défini par la valeur de la propriété SelectionMode  
                	-  Single signifie qu’une seule valeur est sélectionnable
                    -	Multiple et Extended permettent la sélection multiple 
        
            La différence entre ces deux derniers modes est la suivante : 
            -	Multiple : La sélection ou désélection d’un élément est faite par un simple clic. 
            -	Extended : Il est nécessaire de maintenir la touche [Ctrl] appuyée pendant les opérations de sélection/désélection. 

            La liste des données contenues par le contrôle est fournie par l’intermédiaire de ses propriétés Items ou ItemsSource.
        -->
        <TextBox Grid.Row="3" TextWrapping="Wrap" x:Name="textBox2" Text="TextBox2" Height="50" VerticalAlignment="Top" HorizontalAlignment="Left"
                Width="147" Margin="10,10,0,0" />
        <Button Grid.Row="3" Width="30" Height="30" VerticalAlignment="Top" HorizontalAlignment="Right" Background="GreenYellow" Content="+" 
                FontWeight="Bold" Margin="0,20,65,0" x:Name="AddToListBox" Click="AddToListBox_Click"/>
        <ListBox Grid.Row="4" Grid.RowSpan="2" SelectionMode="Multiple" x:Name="listBox1" Margin="10,0,0,0" Height="100" HorizontalAlignment="Left" Width="147"
                 VerticalAlignment="Top">
            <ListBoxItem Content="Java" />
            <ListBoxItem Content="C#" />
            <ListBoxItem Content="ASP.NET" />
            <ListBoxItem Content="Spring Boot" />
        </ListBox>
        <Button Grid.Row="4" Width="30" Height="30" VerticalAlignment="Top" HorizontalAlignment="Right" Background="IndianRed" Content="-" 
                FontWeight="Bold" Margin="0,25,65,0" x:Name="btnSupp" Click="btnSupp_Click"/>


        <!--ListView-->
        <!--Permet d’afficher une liste d’éléments sous la forme d’une grille-->
        <Label Grid.Row="3" Grid.Column="1" x:Name="label3" Content="Liste des clients" FontWeight="Bold" VerticalAlignment="Top" HorizontalAlignment="Center"
               FontSize="14" Padding="1"/>
        <ListView  Grid.Row="3" Grid.Column="1" VerticalAlignment="Top" HorizontalAlignment="Left" Height="100" Width="240" Margin="10,33,0,0" Grid.RowSpan="2">
            <!--  Source des données : Definition des date de type DateTime-->
            <sys:DateTime>1/1/12</sys:DateTime>
            <sys:DateTime>5/15/14</sys:DateTime>
            <sys:DateTime>3/8/2018</sys:DateTime>
            <!--On les affiche dans la ListView-->
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Date" Width="70"/>
                    <!--DisplayMemberBinding permet d'afficher un membre/une propriété de l'objet
                        Le mot clé Binding décrit la relation pour la propriété (ex: DayOfWeek)
                       Binding : Liaison de données
                    -->
                    <GridViewColumn Header="Jour" Width="70" DisplayMemberBinding="{Binding  DayOfWeek}" />
                    <GridViewColumn Header="Jour" Width="70" DisplayMemberBinding="{Binding  Year}" />
                </GridView>
            </ListView.View>
        </ListView>


        <!--TreeView-->
        <!--Offre la possibilité de visualiser des données sous une forme hiérarchique. 
         Chacun des objets peut en effet avoir un ou plusieurs enfants, qui peuvent eux même être les parents d’autres nœuds,
        et ainsi de suite
        -->
        <Label Grid.Row="2" Grid.Column="2" x:Name="label4" Content="Liste des Continents" FontWeight="Bold" VerticalAlignment="Top" HorizontalAlignment="Center"
               FontSize="14" Padding="1"/>
        <TreeView Grid.Row="2" Grid.Column="2" Grid.RowSpan="2" Height="110" Width="200" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,25,0,0">
            <TreeViewItem x:Name="europe" Header="Europe">
                <TreeViewItem Header="France"/>
                <TreeViewItem Header="Croatie"/>
            </TreeViewItem>
            <TreeViewItem x:Name="amerique" Header="Amerique">
                <TreeViewItem Header="Brésil"/>
                <TreeViewItem Header="Canada"/>
            </TreeViewItem>
            <TreeViewItem x:Name="afrique" Header="Afrique">
                <TreeViewItem Header="Ethiopie"/>
                <TreeViewItem Header="Maroc"/>
            </TreeViewItem>
            <TreeViewItem x:Name="asie" Header="Asie">
                <TreeViewItem Header="Japon"/>
                <TreeViewItem Header="Inde"/>
            </TreeViewItem>
            <TreeViewItem x:Name="oceanie" Header="Océanie">
                <TreeViewItem Header="Nouvelle-Zélande"/>
                <TreeViewItem Header="Australie"/>
            </TreeViewItem>
        </TreeView>

        <!--Gestion des touches de raccourci-->
        <!--KeyDown : Evenement qui se produit quand l'utilisateur appuie sur une touche du clavier 
            On veut créer un evenement lorsque l'utilisateur appuie sur la touche RightShift et  A
        -->
        <Label Grid.Row="4" Grid.Column="2" Content="BindingsKeys: " HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="14" FontWeight="Bold" Padding="1" />
        <TextBox Grid.Row="4" Grid.Column="2" x:Name="textBox3" Height="50" VerticalAlignment="Center" HorizontalAlignment="Left" Width="150" Margin="103,0,0,0" 
                KeyDown="textBox3_KeyDown" />

        <!--TabControl -->
        <!--
            Permet de séparer votre interface en différentes zones.
            Les 'TabControl' sont souvent utilisés dans les application Windows et même dans l'interface Windows elle même, 
           comme dans la fenêtre des propriétés pour les fichiers/dossiers etc...
        -->
        <Label Grid.Row="5" Grid.Column="1" Content="TabControl: " x:Name="label6" />
        <TabControl Grid.Row="5" Grid.Column="1" Grid.RowSpan="2" VerticalAlignment="Top" HorizontalAlignment="Center" Height="120" Width="244" Margin="0,27,0,0">
            <TabItem Header="TabItem1" x:Name="tabItem1">
                <StackPanel>
                    <CheckBox>Ecriture</CheckBox>
                    <CheckBox>Lecture</CheckBox>
                    <Separator />
                    <Label x:Name="label7" Height="15" Width="30" Padding="1"/>
                    <Slider Background="Tomato" x:Name="slider1" Height="40" Width="200" Margin="0,5,0,0" Minimum="0" Maximum="100" 
                           IsSnapToTickEnabled="True" TickFrequency="10" TickPlacement="BottomRight" ValueChanged="slider1_ValueChanged"/>
                </StackPanel>
            </TabItem>
            <TabItem Header="TabItem2" x:Name="tabItem2">
                <CheckBox>Avancé</CheckBox>
            </TabItem>

        </TabControl>

        <!--Password-->
        <Label Grid.Row="5" Grid.Column="2" Content="Password: " x:Name="label8" VerticalAlignment="Center" />
        <PasswordBox Grid.Row="5" Grid.Column="2" Width="186" Height="26" Margin="85,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left"/>

        <!--UserControl-->
        <!--
            UserControl nous permet de créer nos propres Contrôle
            Il pourra être utilisé à plusieurs endroits différentes dans notre application ou par plusieurs  applications
        
            Création d'un UserControl nommé NumericUpDown
            
        -->
        <Label Grid.Row="7"  Content="Utilisation d'un UserCntrol : NumericUpDown (Avec repeatButton)"
               x:Name="label9" VerticalAlignment="Center" Grid.ColumnSpan="2" 
               HorizontalAlignment="Left" FontWeight="Bold" Margin="20,0,0,0"/>

        <local:NumericUpDown Grid.Row="7" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.ColumnSpan="2" Margin="142,0,0,0"/>
    </Grid>
</Window>
